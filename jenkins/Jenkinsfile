pipeline {
    agent any

    environment {
        AWS_REGION = 'us-west-1'
        APP_NAME   = 'myapp'
        ECR_REPO   = '302263069749.dkr.ecr.us-west-1.amazonaws.com/myapp'
    }

    stages {

        stage('Checkout') {
            steps {
                // Multibranch Pipeline automatically checks out the branch
                checkout scm
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                script {
                    def tfDir = "infra/${env.BRANCH_NAME}"
                    if (fileExists(tfDir)) {
                        dir(tfDir) {
                            sh 'terraform init'
                            sh "terraform apply -var-file=terraform.tfvars -auto-approve"
                        }
                    } else {
                        echo "No Terraform folder for branch ${env.BRANCH_NAME}, skipping infra provisioning"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') { // Dockerfile location
                    script {
                        def imageTag = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
                        sh "docker build -t ${ECR_REPO}:${imageTag} ."
                    }
                }
            }
        }

        stage('Push Docker to ECR') {
            steps {
                sh '''
                aws ecr get-login-password --region $AWS_REGION | \
                docker login --username AWS --password-stdin $ECR_REPO
                '''
                script {
                    def imageTag = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
                    sh "docker push ${ECR_REPO}:${imageTag}"
                }
            }
        }

        stage('Deploy to ECS & S3') {
            steps {
                sh """
                # ECS deploy (can use terraform outputs or AWS CLI)
                echo "Deploying Docker image to ECS"
                # Example: aws ecs update-service ... using imageTag

                # Sync static files to S3
                aws s3 sync ./app/src s3://myapp-${env.BRANCH_NAME}-bucket --delete
                """
            }
        }
    }

    post {
        success {
            echo "Deployment successful for branch ${env.BRANCH_NAME}"
        }
        failure {
            echo "Deployment failed for branch ${env.BRANCH_NAME}"
        }
    }
}
